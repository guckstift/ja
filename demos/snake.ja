
struct SDL_QuitEvent {
	var type : uint32;
	var timestamp : uint32;
}

enum SDL_Scancode {
    SDL_SCANCODE_UNKNOWN = 0,
}

var SDLK_RIGHT = 0x40000000 | 79;
var SDLK_LEFT = 0x40000000 | 80;
var SDLK_DOWN = 0x40000000 | 81;
var SDLK_UP = 0x40000000 | 82;
 
struct SDL_Keysym {
    var scancode : SDL_Scancode;
    var sym : int32;
    var mod : uint16;
    var unused : uint32;
}

struct SDL_KeyboardEvent {
    var type : uint32;
    var timestamp : uint32;
    var windowID : uint32;
    var state : uint8;
    var repeat : uint8;
    var padding2 : uint8;
    var padding3 : uint8;
    var keysym : SDL_Keysym;
}

union SDL_Event {
	var type : uint32;
	var key : SDL_KeyboardEvent;
    var padding : [56]uint8;
}

struct SDL_Rect {
	var x : int32;
	var y : int32;
	var w : int32;
	var h : int32;
}

dllimport "libc.so.6" {
	function rand() : int;
}

dllimport "libSDL2-2.0.so" {
	function SDL_Init(flags : uint32) : int32;
	
	function SDL_CreateWindow(
		title : cstring, x : int32, y : int32, w : int32, h : int32,
		flags : uint32
	) : ptr;
	
	function SDL_CreateRenderer(
		wnd : ptr, index : int32, flags : uint32
	) : ptr;
	
	function SDL_PollEvent(event : >SDL_Event) : int32;
	function SDL_DestroyWindow(wnd : ptr);
	function SDL_Quit();
	function SDL_GetTicks() : uint32;
	function SDL_RenderPresent(renderer : ptr);
	function SDL_RenderClear(renderer : ptr) : int32;
	
	function SDL_SetRenderDrawColor(
		renderer : ptr, r : uint8, g : uint8, b : uint8, a : uint8
	) : int32;
	
	function SDL_RenderFillRect(renderer : ptr, rect : >SDL_Rect) : int32;
}

var SDL_INIT_VIDEO = 0x20;
var SDL_WINDOW_SHOWN = 0x4;
var SDL_WINDOWPOS_CENTERED = 0x2FFF0000;
var SDL_QUIT = 0x100;
var SDL_KEYDOWN = 0x300;

struct Point {
	var x : int;
	var y : int;
}

struct Snake {
	var segments : [256]Point;
	var start = 0;
	var length = 1;
}

var dir : Point;
dir.x = 0-1;
dir.y = 0;

var apple : Point;
apple.x = 4;
apple.y = 4;

var rect : SDL_Rect;
rect.x = 0;
rect.y = 0;
rect.w = 16;
rect.h = 16;

var snake : Snake;
snake.segments[0].x = 8;
snake.segments[0].y = 8;

var last : int32 = 0-125;

print SDL_Init(SDL_INIT_VIDEO);

var wnd = SDL_CreateWindow(
	"Snake", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 256, 256, 0
);

var renderer = SDL_CreateRenderer(wnd, 0-1, 0);
var running = true;
var event : SDL_Event;

while running {
	while SDL_PollEvent(>event) {
		if event.type == SDL_QUIT {
			running = false;
			break;
		}
		else if event.type == SDL_KEYDOWN {
			if event.key.keysym.sym == SDLK_LEFT {
				dir.x = 0-1;
				dir.y = 0;
			}
			else if event.key.keysym.sym == SDLK_RIGHT {
				dir.x = 1;
				dir.y = 0;
			}
			else if event.key.keysym.sym == SDLK_UP {
				dir.x = 0;
				dir.y = 0-1;
			}
			else if event.key.keysym.sym == SDLK_DOWN {
				dir.x = 0;
				dir.y = 1;
			}
		}
	}
	
	if last + 125 < SDL_GetTicks() {
		last = last + 125;
		
		var head = >snake.segments[snake.start];
		snake.start = (snake.start + 255) % 256;
		var new_head = >snake.segments[snake.start];
		new_head.x = (head.x + 16 + dir.x) % 16;
		new_head.y = (head.y + 16 + dir.y) % 16;
		snake.length = snake.length + 1;
		
		if new_head.x == apple.x && new_head.y == apple.y {
			apple.x = 0-1;
			
			while apple.x == 0-1 {
				apple.x = rand() % 16;
				apple.y = rand() % 16;
				
				var i = 0;
				while i < snake.length {
					var p = >snake.segments[(i + snake.start) % 256];
					
					if apple.x == p.x && apple.y == p.y {
						apple.x = 0-1;
						break;
					}
					
					i = i + 1;
				}
			}
		}
		else {
			var i = 1;
			while i < snake.length {
				var p = >snake.segments[(i + snake.start) % 256];
				
				if new_head.x == p.x && new_head.y == p.y {
					snake.length = 1;
					break;
				}
				
				i = i + 1;
			}
			
			if snake.length > 1 {
				snake.length = snake.length - 1;
			}
		}
		
		SDL_SetRenderDrawColor(renderer, 8, 16, 32, 0);
		SDL_RenderClear(renderer);
		
		SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
		rect.x = 16 * apple.x;
		rect.y = 16 * apple.y;
		SDL_RenderFillRect(renderer, >rect);
		
		SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);
		
		var i = 0;
		while i < snake.length {
			var p = >snake.segments[(i + snake.start) % 256];
			
			rect.x = 16 * p.x;
			rect.y = 16 * p.y;
			SDL_RenderFillRect(renderer, >rect);
			i = i + 1;
		}
		
		SDL_RenderPresent(renderer);
	}
}

SDL_DestroyWindow(wnd);
SDL_Quit();
